package com.scienceminer.nerd.disambiguation;

import org.apache.commons.io.FileUtils;

import com.scienceminer.nerd.kb.LowerKnowledgeBase;

import org.grobid.core.GrobidModels;
import org.grobid.core.analyzers.GrobidAnalyzer;

import org.grobid.core.engines.label.TaggingLabel;
import org.grobid.core.engines.label.TaggingLabels;
import org.grobid.core.engines.tagging.GrobidCRFEngine;
import org.grobid.core.engines.AbstractParser;
import org.grobid.core.exceptions.GrobidException;
import org.grobid.core.factory.GrobidFactory;
import org.grobid.core.features.FeaturesVectorDeepType;
import org.grobid.core.features.FeatureFactory;
import org.grobid.core.layout.LayoutToken;
import org.grobid.core.tokenization.TaggingTokenCluster;
import org.grobid.core.tokenization.TaggingTokenClusteror;
import org.grobid.core.utilities.*;
import org.grobid.core.utilities.counters.CntManager;
import org.grobid.core.utilities.counters.impl.CntManagerFactory;
import org.grobid.core.lexicon.FastMatcher;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.*;
import java.util.*;

import static org.apache.commons.lang3.StringUtils.*;
import org.apache.commons.lang3.tuple.Pair;

import com.scienceminer.nerd.utilities.NerdConfig;

/**
 * A sequence labeling parser to predict types from a type system generated by DeepType. 
 * The actual sequence labeling implementation can be CRF (Wapiti, with feature engineering 
 * and feature template) or a variety of Depp Learning algoritms via DeLFT (BidLSTM-CRF,
 * BidLSTM-CRF with ELMO, BERT with fine-tuning, etc.).
 *
 * In the DeepType article, a BidLSTM-CRF is used. 
 */
public class TypeSequenceLabeling extends AbstractParser {
    private static final Logger logger = LoggerFactory.getLogger(TypeSequenceLabeling.class);

    public TypeSequenceLabeling(LowerKnowledgeBase wikipedia) {
        super(GrobidModels.DEEPTYPE, CntManagerFactory.getCntManager(), 
            GrobidCRFEngine.valueOf(wikipedia.getConfig().getSequenceLabelingEngineType()));
    }

    


}