Sur quoi reposent nos infrastructures numériques ?
POURQUOI LES PROBLÈMES DE SUPPORT DES INFRASTRUCTURES NUMÉRIQUES SONT DE PLUS EN PLUS PRESSANTSL' open source, grâce à ses points forts cités plus haut dans cet ouvrage 1 , est rapidement en train de devenir un standard pour les projets d'infrastructure numérique et dans le développement logiciel en général. Black Duck, une entreprise qui aide ses clients à gérer des programmes open source, dirige une enquête annuelle qui interroge les entreprises sur leur utilisation de l'open source. (Cette enquête est l'un des rares projets de banque de données qui existe sur le sujet.) Dans leur étude de 2015 2 , 78 % des 1 300 entreprises interrogées déclarent que les logiciels qu'elles ont créés pour leurs clients sont construits grâce à l'open source, soit presque le double du chifreL'open source a vu sa popularité s'accroître de manière impressionnante ces cinq dernières années, pas seulement grâce à ses avantages évidents pour les développeurs et les consommateurs, mais également grâce à de nouveaux outils qui rendent la collaboration plus facile. Pour comprendre pourquoi les infrastructures numériques rencontrent des problèmes de support grandissants, nous devons saisir comment le développement de logiciels open source prolifère.GitHub, un espace standardisé pour collaborer sur du codeOn n'insistera jamais trop sur le rôle clé de GitHub dans la difusion de l'open source auprès du grand public. L'open source a beau exister depuis près de trente ans, jusqu'en 2008, contribuer à des projets open source n'était pas si facile. Le développeur motivé devait d'abord découvrir qui était le mainteneur du projet, trouver une manière de le contacter, puis proposer ses changements en utilisant le format choisi par le mainteneur (par exemple une liste courriel ou un forum). GitHub a standardisé ces méthodes de communication : les mainteneurs sont listés de façon transparente sur la page du projet, et les discussions sur les changements proposés ont lieu sur la plateforme GitHub.GitHub a aussi créé un vocabulaire qui est désormais standard parmi les contributeurs à l'open source, tel que la pull request (où un développeur soumet à l'examen de ses pairs une modiication à un projet), et changé le sens du terme fork (historiquement, créer une copie d'un projet et le modiier pour le transformer en un nouveau projet ; littéralement, « fork » signiie « bifurcation »). Avant GitHub, forker un projet revenait à dire qu'il y avait un diférend irréconciliable au sujet de la direction qu'un projet devrait prendre. Forker était considéré comme une action grave : si un groupe de développeurs décidait de forker un projet, cela signiiait qu'il se scindait en deux factions idéologiques. Forker était aussi utilisé pour développer un nouveau projet qui pouvait avoir une utilisation radicalement diférente du projet initial.Ce type de « fork de projet » existe toujours, mais GitHub a décidé d'utiliser le terme fork pour encourager à davantage d'activité sur sa plateforme. Un fork GitHub, contrairement à un fork de projet, est une copie temporaire d'un projet sur laquelle on efectue des modiications et qui est généralement refusionnée avec le projet. Le fork en tant que pratique quotidienne sur GitHub a ajouté une connotation positive, légère au terme : à savoir prendre l'idée de quelqu'un et l'améliorer.GitHub a aussi aidé à standardiser l'utilisation d'un système de contrôle de version appelé Git. Les systèmes de contrôle de versions sont un outil qui permet de garder une trace de chaque contribution apportée sur un morceau de code précis. Par exemple, si le développeur 1 et le développeur 2 corrigent simultanément diférentes parties du même code, enregistrer chaque changement dans un système de contrôle de version permet de faire en sorte que leurs changements n'entrent pas en conlit.Il existe plusieurs systèmes de contrôle de versions, par exemple Apache Subversion et Concurrent Versions System (CVS). Avant GitHub, Git était un système de contrôle de version assez méconnu. En 2010, Subversion était utilisé dans 60 % des projets logiciels, contre 11 % pour Git 3 .C'est Linus Torvalds, le créateur de Linux, qui a conçu Git en 2005. Son intention était de mettre à disposition un outil à la fois plus eicace et plus rapide, qui permette de gérer de multiples contributions apportées par de nombreux participants. Git était vraiment diférent des systèmes de contrôle de version précédents, et donc pas forcément facile à adopter, mais son worklow 4 décentralisé a résolu un vrai problème pour les développeurs.GitHub a fourni une interface utilisateur intuitive pour les projets open source qui recourent à Git, ce qui rend l'apprentissage plus facile pour les développeurs. Plus les développeurs utilisent GitHub, plus cela les incite à continuer d'utiliser Git. En 2016, Git est utilisé par 38 % des projets de logiciels, tandis que la part de Subversion est tombée à 47 % 5. Bien que Subversion soit encore le système de contrôle de version le plus populaire, son usage décline. L'adoption généralisée de Git rend plus facile pour un développeur la démarche de se joindre à un projet sur GitHub, car la méthode pour faire des modiications et pour les communiquer est la même pour tous les projets. Apprendre à contribuer à un seul des projets vous permet d'acquérir les compétences pour contribuer à des centaines d'autres. Ce n'était pas le cas avant GitHub, où des systèmes de contrôle de versions diférents étaient utilisés pour chaque projet.Enin, GitHub a créé un espace de sociabilité qui permet de discuter et de tisser des liens au-delà de la stricte collaboration sur du code. La plateforme est devenue de facto une sorte de communauté pour les développeurs, qui l'utilisent pour communiquer ensemble et exposer leur travail. Ils peuvent y démontrer leur inluence et présenter un portfolio de leur travail comme jamais auparavant.Les usages de GitHub sont un relet de son ascension vertigineuse. En 2011 6 , il n'y avait que 2 millions de dépôts (repository). Aujourd'hui, GitHub a 14 millions d'utilisateurs et plus de 35 millions de dépôts 7 (ce qui inclut aussi les dépôts forkés, le compte des dépôts uniques s'élève plutôt à 17 millions). Brian Doll, de chez GitHub, a noté qu'il a fallu quatre ans pour atteindre le million de dépôts, mais que passer de 9 millions à 10 millions n'a pris que quarante-huit jours.EnStack Overlow est devenu de facto une plateforme d'entraide pour les développeurs, qui peuvent poser des questions de programmation, trouver des réponses à des problèmes de code spéciiques ou juste échanger des conseils sur la meilleure façon de créer un aspect précis d'un logiciel. On pourrait déinir la plateforme comme un « support client » participatif pour les développeurs à travers le monde. Même si Stack Overlow n'est pas un endroit où l'on écrit directement du code, c'est un outil de collaboration essentiel pour les développeurs individuels, qui facilite grandement la résolution de problèmes et permet de coder plus eicacement. Cela signiie qu'un développeur individuel est capable de produire plus, en moins de temps, ce qui améliore le rendement global. Stack Overlow a également permis à certains utilisateurs d'apprendre de nouveaux concepts de développement (ou même de s'initier au code tout court) et a rendu le codage plus facile et plus accessible à tous.Tendances macro dans un paysage en mutation constantepas à coder », où il se plaint de la mode des stages et des écoles de code. Tout en se félicitant du désir des personnes non techniciennes de comprendre le code d'un point de vue conceptuel, Atwood émet des réservesAujourd'hui, il y a tellement de projets qui sont élaborés et publiés qu'il est tout simplement impossible pour chacun d'eux de développer une communauté suisamment importante et viable, avec des contributeurs réguliers qui discuteraient avec passion des modiications à apporter lors de débats approfondis sur des listes courriels. Au lieu de cela, beaucoup de projets sont maintenus par une ou deux personnes seulement, alors même que la demande des utilisateurs pour ces projets peut excéder le travail nécessaire à leur simple maintenance.GitHub a rendu simples la création et la contribution à de nouveaux projets. Cela a été une bénédiction pour l'écosystème open source, car les projets se développent plus rapidement. Mais cela peut aussi parfois tourner à la malédiction pour les mainteneurs de projets, car davantage de personnes peuvent facilement signaler des problèmes ou réclamer de nouvelles fonctionnalités, sans pour autant contribuer elles-mêmes en retour. Ces interactions supericielles ne font qu'alourdir la charge de travail des mainteneurs, dont on attend qu'ils répondent à une quantité croissante de requêtes.Il ne serait pas déraisonnable d'airmer qu'un monde « postopen source » implique une rélexion non seulement autour des licences, ainsi que James Governor l'exprimait dans son commentaire originel, mais aussi autour du processus de développement lui-même.Noah Kantrowitz, développeur Python de longue date et membre de la Python Software Foundation, a résumé ce changement dans un post de blog[…] Alors même que nous allons de plus en plus vers des outils de niche, il devient compliqué de justiier l'investissement en temps requis pour devenir contributeur. « Combler son propre besoin » est toujours une excellente motivation, mais il est difficile de construire un écosystème là-dessus.L'autre problème est le déséquilibre de plus en plus important entre producteurs et consommateurs. Avant, cela s'équilibrait à peu près. Tout le monde investissait du temps et des eforts dans les Communs et tout le monde en récoltait les bénéices. Ces tempsci, très peu de personnes font cet efort et la grande majorité ne fait que bénéicier du travail de ceux qui s'impliquent.Ce déséquilibre s'est tellement enraciné qu'il est presque impensable pour une entreprise de rendre (en temps ou en argent) ne serait-ce qu'une petite fraction de la valeur qu'elle tire des Communs.Cela ne veut pas dire qu'il n'existe plus de grands projets open source avec des communautés de contributeurs fortes (Node. js, dont on parlera plus tard, est un exemple de projet qui est parvenu à ce statut). Cela signiie qu'à côté de ces réussites, il y a une nouvelle catégorie de projets qui est défavorisée par les normes et les attentes actuelles de l'open source et quele comportement qui dérive de ces nouvelles normes afecte même des projets plus importants et plus anciens.Hynek Schlawack, fellow 24 de la Python Software Foundation et contributeur à des projets d'infrastructure Python, exprimeses craintes au sujet d'un futur où il y aurait une demande plus forte, mais seulement une poignée de contributeurs solides :Ce qui me frustre le plus, c'est que nous n'avons jamais eu autant de développeurs Python et aussi peu de contributions de haute qualité. Dès que des développeurs clés comme Armin Ronacher ralentissent leur travail, la communauté tout entière le ressent aussitôt. Le jour où Paul Kehrer arrêtera de travailler sur PyCA, on sera très mal. Si Hawkowl interrompt son travail de portage, Twisted ne sera jamais sur Python 3 et Git.La communauté est en train de se faire saigner par des personnes qui créent plus de travail qu'elles n'en fournissent.[…] En ce moment, tout le monde bénéicie de ce qui a été construit, mais la situation se détériore à cause du manque de inancements et de contributions. Ça m'inquiète, parce Python est peut-être très populaire aujourd'hui, mais une fois que les conséquences se feront sentir, les opportunistes partiront aussi vite qu'ils étaient arrivés.Pour la plupart des développeurs, il n'y a guère que cinq ans peut-être que l'open source est devenue populaire. La large communauté des concepteurs de logiciel débat rarement de la pérennité à long terme de l'open source, et n'a parfois même pas conscience du problème. Avec l'explosion du nombre de nouveaux développeurs qui utilisent du code partagé sans contribuer en retour, nous construisons des palaces sur une infrastructure en ruines.
