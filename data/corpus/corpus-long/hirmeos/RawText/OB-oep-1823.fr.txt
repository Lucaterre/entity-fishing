Sur quoi reposent nos infrastructures numériques ?

UNE ESQUISSE DU TABLEAU

Il est trop tôt pour dire à quoi devrait ressembler le soutien institutionnel à long terme d'un point de vue prospectif, mais il y a plusieurs domaines de travail critiques qui peuvent nous aider à le déterminer. Les propositions suivantes se rattachent à trois domaines :

• traiter les infrastructures numériques comme un bien commun essentiel et les élever au rang d'acteur intersectoriel clé ; • travailler avec des projets pour améliorer les standards, la sécurité et les lux de production ; • augmenter la taille du groupe de contributeurs de manière à ce que davantage de personnes, et encore plus de personnes de types diférents, puissent élaborer et soutenir ensemble les logiciels publics.

Conscientiser et éduquer les acteurs clés

Comme nous l'avons relevé dans cette étude, beaucoup d'acteurs clés-dont les startups, les gouvernements, et les sociétés de capital-risque-pensent à tort que les logiciels publics « fonctionnent, tout simplement » et ne requièrent pas de maintenance supplémentaire. Pour entretenir correctement l'écosystème de nos infrastructures numériques, ces populations devraient être les premières à être informées du problème. Les infrastructures numériques ont besoin de porte-parole qui soient afranchis de toute contrainte politique ou commerciale et qui puissent comprendre et communiquer les besoins de l'écosystème.

Traiter les infrastructures numériques comme des biens communs essentiels pourrait également motiver l'investissement direct dans la construction de meilleurs systèmes en partant de zéro. Par exemple, aux États-Unis, les autoroutes inter-États et le réseau de bibliothèques publiques furent dès l'origine conçus comme des ressources collectives.

Travailler avec les projets pour moderniser l'organisation de travail de rendre les contributions plus simples. Le développeur Felix Geisendörfer, par exemple, a suggéré que chaque personne qui soumet une modiication du code devrait avoir une permission de commit ain de réduire l'engorgement au niveau de l'unique mainteneur vériiant et approuvant ces changements. Felix a estimé que « cette approche est un moyen fantastique d'éviter que le projet ne se ratatine en transformant le projet d'un seul homme en celui d'une communauté » 4 .

Le règlement de contribution de Node.js, qui peut être adopté par les autres projets Node, met l'accent sur l'augmentation du nombre de contributeurs et sur leur autonomisation dans la prise de décision, plutôt que de désigner les mainteneurs comme seule autorité approbatrice. Leurs règles de contribution expliquent comment soumettre et valider des pull requests, comment consigner des bugs, etc. Les mainteneurs Node.js ont constaté qu'adopter de meilleures règles les avait aidés à gérer leur charge de travail et à faire évoluer leur communauté vers un projet plus sain et actif. Des études sont à réaliser pour déterminer quels projets doivent avancer en priorité. Autrement dit, déinir à quoi ressemble un « projet à succès », aussi bien en termes de inancement et de modèles de gouvernance, que dans l'équilibre à trouver entre mainteneurs, contributeurs et usagers ! La réponse peut varier en fonction des diférents types de projets et de leur ampleur.

Encourager les standards communs dans les projets open source

Bien que GitHub soit en train de devenir une plateforme standard pour la collaboration sur le code, de nombreux aspects des projets open source ne sont pas encore standardisés, notamment l'ampleur et la richesse de la documentation, des licences et des guides de contribution, ainsi que le style de code et le formatage.

Encourager l'adoption de standards de projets pourrait faciliter, pour les mainteneurs, la gestion des contributions, tout en réduisant pour les contributeurs les obstacles à la participation.

Parmi les exemples de standardisation croissante, on trouve le code de conduite, qui est un règlement détaillant les attentes en termes d'attitude et de communication.

Ces dernières années, des codes de conduite ont été adoptés par un nombre croissant de communautés de projets, notamment Node.js, Django et Ruby. Bien que le processus d'adoption ait pu donner lieu à d'intenses débats au sein de certaines communautés, leur prolifération révèle un intérêt croissant pour la responsabilisation du comportement des communautés.

Augmenter le nombre de contributeurs et contributrices open source

Améliorer les relations entre projets et acteurs extérieurs

conception ne tient plus. Les startups sont en concurrence pour capter l'attention de leurs clients. L'identité de la marque est devenue l'un des principaux facteurs de diférenciation.

Ces cinq dernières années ont été celles de l'essor du développeur full stack (polyvalent) : des développeurs plus généralistes que spécialisés, capables de travailler sur plusieurs domaines d'un logiciel complexe, et qui sont susceptibles d'avoir des compétences dans la conception et la production. Les équipes de développement sont plus soudées, elles utilisent les méthodes agiles avec des approches de conception d'architecture logicielle (où le livrable est élaboré en faisant des navettes entre les équipes de techniciens, designers et commerciaux), plutôt qu'une approche en cascade (où chaque équipe apporte sa pièce à l'édiice avant de la transmettre au groupe de travail suivant).

Les logiciels open source ont connu peu d'évolutions de ce genre, malgré notre dépendance croissante vis-à-vis d'eux. On comprend aisément que le code soit au coeur d'un projet open source, il est en quelque sorte le « produit inal » ou le livrable. Les fonctions relatives à la gestion de la communauté, à la documentation ou à la promotion du projet, qui sont la marque d'une organisation saine et durable, sont moins valorisées. Il en découle que les projets sont déséquilibrés. Beaucoup de choses pourraient être entreprises pour inancer et soutenir les contributions autres que le code, des dons en nature pour payer les serveurs par exemple, ou des avantages comme une assurance maladie. Disposer de soutiens de ce type permettrait de réduire notablement la charge des développeurs.