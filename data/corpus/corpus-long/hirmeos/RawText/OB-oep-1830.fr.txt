Sur quoi reposent nos infrastructures numériques ?

NÉGLIGER LES INFRASTRUCTURES A UN COÛT CACHÉ

Comme nous l'avons vu, l'infrastructure numérique est un constituant essentiel du monde actuel. Notre société repose sur les logiciels et ces logiciels s'appuient de plus en plus sur une infrastructure qui utilise des méthodologies open source. Dans la mesure où nous prenons peu d'initiatives pour comprendre et pérenniser notre infrastructure numérique, que mettons-nous en péril ?

Ne pas réinvestir dans l'infrastructure numérique présente des dangers que l'on peut classer en deux catégories :

• les coûts directs : les coûts directs sont les bugs non détectés et les vulnérabilités de sécurité qui peuvent être exploitées à des ins malveillantes ou qui mènent à des interruptions imprévues dans le fonctionnement des logiciels. Ces coûts sont fortement ressentis et causent des problèmes qui doivent être résolus immédiatement.

• les coûts indirects : les coûts indirects se traduisent par exemple par la perte de main-d'oeuvre qualiiée, ainsi que par une croissance faible et peu d'innovation. Même si ces coûts ne sont pas immédiatement perceptibles, ils représentent une valeur sociale diicile à évaluer.

Bugs, failles de sécurité et interruptions du service

L'un des aspects du problème est que beaucoup de projets sont des outils anciens, conçus au départ par un ou plusieurs développeurs passionnés, qui ont par la suite manqué de ressources pour gérer le succès de leur projet. Avec le temps, les contributions diminuent et les acteurs restants se lassent et s'en vont, mais pour autant le projet est toujours activement utilisé, avec seulement une ou deux personnes qui tâchent de le maintenir en vie.

Un autre problème croissant dans le paysage des logiciels actuel, où l'on voit tant de jeunes développeurs inexpérimentés, c'est que les concepts de sécurisation ne sont pas enseignés ou pas considérés comme prioritaires. Les nouveaux développeurs veulent simplement écrire du code qui marche. Ils ne savent pas faire un logiciel sécurisé ou pensent à tort que le code public qu'ils utilisent dans la sécurité de leurs programmes a été vériié. Même les bonnes pratiques de divulgation sécurisée ou de gestion des failles ne sont généralement pas enseignées ni comprises. La sécurité ne devient un enjeu que lorsque le code d'un développeur a été compromis.

Christopher Allen a coécrit la première version du protocole de transfert sécurisé TLS (Transport Layer Security), dont les versions successives sont devenues un standard utilisé quasiment universellement en ligne, y compris sur des sites comme Google, Facebook ou YouTube. Bien que le protocole soit devenu un standard, Christopher parle ainsi de ses origines 4 :

En tant que coauteur de TLS, je n'aurais pas prédit que quinze ans plus tard la moitié d'Internet utiliserait une implémentation de TLS maintenue par un ingénieur à quart-temps. C'est ce manque de maintenance qui a conduit au bug tristement célèbre de Heartbleed. Je raconte aujourd'hui cette anecdote à mes collègues qui travaillent sur les crypto-monnaies pour les avertir que leur chifrage, ultra moderne aujourd'hui, pourrait être « dépassé » dans dix ans et subir le même sort, le projet n'étant plus aussi passionnant, et leur travail acharné risquerait d'être compromis.

En déinitive, la stabilité de nos logiciels repose sur la bonne volonté et la coopération de centaines de développeurs, ce qui représente un risque signiicatif. La fragilité de notre infrastructure numérique a récemment été démontrée par un développeur nommé Azer Koçulu.

Azer, un développeur Node.js, hébergeait un certain nombre de bibliothèques dans un gestionnaire de paquets nommé npm. Après un conlit avec npm sur la propriété intellectuelle d'un de ses projets, Azer, mécontent du dénouement, décida de supprimer toutes les publications qu'il avait pu faire sur npm.

L'une de ces bibliothèques, left-pad, avait été réutilisée dans des centaines d'autres projets. Même s'il ne s'agissait que de quelques lignes de code, en supprimant le projet left-pad, Azer a « cassé » les algorithmes d'innombrables protocoles logiciels développés par d'autres. La décision d'Azer a provoqué tant de problèmes que npm a pris la décision sans précédent de republier sa bibliothèque, contre la volonté d'Azer, ain de restaurer les fonctionnalités ofertes par le reste de l'écosystème

Npm a aussi revu sa politique pour qu'il soit plus diicile pour les développeurs de retirer leurs bibliothèques sans avertissement, reconnaissant ainsi que les actions d'un individu peuvent en afecter négativement beaucoup d'autres 7 .

Les logiciels ne reçoivent pas la maintenance nécessaire dont ils ont besoin

Construire une infrastructure numérique de façon désorganisée implique que tout logiciel sera construit plus lentement et moins eicacement. L'histoire de l'infrastructure Python en fournit un bon exemple.

J'ai personnellement eu des demandes pour du travail non payé (les discussions pour payer le travail n'aboutissent jamais) par des entreprises aux proits considérables, grandes ou petites, pour mes projets. Si je ne réponds pas dans les temps convenus, si je n'accepte pas une pull request merdique, on va me coller une étiquette de connard. Il n'y a rien de pire que d'être face à des développeurs du noyau Python/PyPA travaillant pour Red Hat (sic), qui exigent de toi un travail non payé tout en critiquant ce qu'ils considèrent comme les insuisances de ton projet, pour te pourrir ta journée et plomber ta foi en l'open source.

Pour moi, c'est là que le bât blesse.

[…] On sait qu'on a créé quelque chose gratuitement, par passion, et on voit ce lux inini de personnes qui crient « plus ! encore plus ! » et qui se mettent en colère quand on ne traite pas leur cas particulier. Il y avait mon numéro de téléphone sur l'un de mes sites personnels pour que mes amis puissent me joindre. Je l'ai enlevé au bout d'une semaine parce que des gens m'appelaient à toute heure de la journée pour de l'assistance sur les plugins, alors qu'il y a un forum consacré à ça. Il n'y a rien de fondamentalement méchant là-dedans, c'est juste que c'est usant. On se met à avoir peur de vériier ses mails ou de répondre au téléphone.

Ryan Bigg, qui écrit de la documentation technique pour le framework Ruby on Rails, a annoncé en novembre 2015 qu'il renonçait à tout travail open source 17 :

Je n'ai plus le temps ni l'énergie de m'investir dans l'open source. Je ne retire strictement aucun revenu de mon travail open source, ce qui veut dire que le travail que je fais là, c'est du temps que je pourrais consacrer à des activités perso, ou à écrire. Ce n'est pas justiié d'attendre de moi que je travaille encore, en dehors de mon emploi salarié, sans que je sois honnêtement rétribué pour ça (en temps ou en argent). C'est aussi une recette qui a de bonnes chances de me conduire au burn-out ou de me rendre juste complètement aigri.

Par ailleurs, la perte de main-d'oeuvre qualiiée dans l'open source, ce n'est pas seulement les contributeurs qui démissionnent, c'est aussi ceux qui n'ont jamais contribué du tout.

Il existe très peu de statistiques sur la démographie des contributeurs open source, ce qui est déjà révélateur en soi. Une analyse récente de GitHub a montré que seulement 5,4 % des contributeurs open source étaient des femmes 18 , qui occupent pourtant environ 15 à 20 % des postes techniques dans l'ensemble des entreprises de logiciels.

L'une des raisons qui fait que les contributeurs open source sont un groupe remarquablement plus homogène que le secteur de la technologie dans son ensemble, c'est qu'ils ont besoin de temps et d'argent pour apporter tout d'abord des contributions signiicatives. Ces contraintes empêchent des contributeurs par ailleurs qualiiés d'entrer dans cet espace.

David Maclver, créateur de Hypothésis, une bibliothèque Python qui sert à tester des applications logicielles, expliquepourquoi il a pu passer autant de temps sur le projet : J'ai pu le faire seulement parce que j'avais le temps et l'argent pour le faire. J'avais le temps parce que j'étais obsessionnel, je n'avais personne à charge et je n'avais pas d'emploi. Je pouvais me permettre de ne pas avoir d'emploi parce que j'avais de l'argent. J'avais de l'argent parce que pendant la dernière moitié de l'année passée, je touchais un salaire deux fois plus élevé que d'habitude, en dépensant deux fois moins que d'habitude et je traversais une dépression qui me rendait trop « borderline » pour avoir envie de dépenser mon argent dans quoi que ce soit d'intéressant. Ce ne sont pas des conditions qu'on peut raisonnablement exiger de quelqu'un.

[…] Est-ce qu'on pourrait produire un logiciel de qualité en moins de temps que ça, en ne travaillant que sur du temps libre ? J'en doute.

Cory Benield, un développeur pour les fonctions de base de Python, écrit 20 :

De manière générale, les personnes qui ne sont pas des hommes cisgenres, hétérosexuels, blancs, de classe moyenne et anglophones sont moins susceptibles de pouvoir assumer les risques inanciers accrus associés à l'absence d'emploi stable. Cela signiie que ces personnes ont vraiment besoin d'un salaire régulier pour pouvoir contribuer le plus eicacement possible. Et nous avons besoin de leur contribution : des équipes diversiiées font un meilleur travail que des équipes homogènes.

Charlotte Spencer, qui contribue au framework logiciel Hoodie et au système de bases de données PouchDB, fait écho à cette opinion 22 :

Toutes mes contributions sont purement bénévoles. Je n'en retire pas d'argent, même si j'aimerais beaucoup pouvoir le faire. J'ai demandé à des vétérans de l'open source s'ils étaient payés et ce n'est pas le cas, ce qui m'a découragé d'essayer quoi que ce soit (si ces personnes-là ne sont pas payées, pourquoi le serais-je ?). J'y consacre la plus grande partie de mon temps libre, mais j'essaie d'en faire moins parce que ça envahissait trop ma vie. Jessica Lord, développeuse, a contribué activement à l'open source tout en travaillant à Code for America, une organisation à but non lucratif qui soutient la technologie dans le secteur public. Urbaniste de formation, elle insiste sur le fait 23 qu'elle n'avait « pas de diplôme en informatique, pas d'expérience formelle en programmation, mais un portfolio GitHub ».

Juger que quelqu'un est un bon programmeur en s'appuyant uniquement sur le code qu'il rend disponible publiquement, c'est exclure bien plus que les marginaux. C'est aussi exclure quiconque n'est pas autorisé à publier son code publiquement pour des raisons de licence ou de sécurité. Cela concerne également un grand nombre de travailleurs freelance ou de contractuels qui, pour des raisons légales, n'ont pas le droit de revendiquer publiquement leur participation à un projet (par exemple, s'ils ont signé un accord de conidentialité). Dans une industrie où on lutte pour dénicher assez de talents, pourquoi limitons-nous artiiciellement le spectre des candidats ?

Comment atténuer ou éviter certains des coûts qui s'imposent aux personnes qui participent à l'élaboration d'infrastructures numériques aujourd'hui ? Pour commencer, nous analyserons comment les projets d'infrastructure sont actuellement inancés.